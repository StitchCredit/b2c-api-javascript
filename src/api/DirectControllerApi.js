/**
 * StitchCredit API
 * StitchCredit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlertRespDTO from '../model/AlertRespDTO';
import CreditReportReport from '../model/CreditReportReport';
import CreditScoreAbstractScore from '../model/CreditScoreAbstractScore';
import CreditScoreHistoryScore from '../model/CreditScoreHistoryScore';
import CreditScoreScore from '../model/CreditScoreScore';
import DirectChangeEmailReqDTO from '../model/DirectChangeEmailReqDTO';
import DirectChangeMobileReqDTO from '../model/DirectChangeMobileReqDTO';
import DirectLoginReqDTO from '../model/DirectLoginReqDTO';
import DirectUserRegReqDTO from '../model/DirectUserRegReqDTO';
import EfxConfigRespDTO from '../model/EfxConfigRespDTO';
import LoginRespDTO from '../model/LoginRespDTO';
import PreauthTokenDTO from '../model/PreauthTokenDTO';
import UserLoginRespDTO from '../model/UserLoginRespDTO';
import UserRespDTO from '../model/UserRespDTO';

/**
* DirectController service.
* @module api/DirectControllerApi
* @version 1.0.0
*/
export default class DirectControllerApi {

    /**
    * Constructs a new DirectControllerApi. 
    * @alias module:api/DirectControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} id 
     * @param {module:model/DirectChangeEmailReqDTO} DirectChangeEmailReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    changeEmailWithHttpInfo(id, DirectChangeEmailReqDTO) {
      let postBody = DirectChangeEmailReqDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeEmail");
      }
      // verify the required parameter 'DirectChangeEmailReqDTO' is set
      if (DirectChangeEmailReqDTO === undefined || DirectChangeEmailReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectChangeEmailReqDTO' when calling changeEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/change-email/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {module:model/DirectChangeEmailReqDTO} DirectChangeEmailReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    changeEmail(id, DirectChangeEmailReqDTO) {
      return this.changeEmailWithHttpInfo(id, DirectChangeEmailReqDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {String} host 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    changeHostWithHttpInfo(id, host) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeHost");
      }
      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling changeHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'host': host
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/change-host/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {String} host 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    changeHost(id, host) {
      return this.changeHostWithHttpInfo(id, host)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {module:model/DirectChangeMobileReqDTO} DirectChangeMobileReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    changeMobileWithHttpInfo(id, DirectChangeMobileReqDTO) {
      let postBody = DirectChangeMobileReqDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeMobile");
      }
      // verify the required parameter 'DirectChangeMobileReqDTO' is set
      if (DirectChangeMobileReqDTO === undefined || DirectChangeMobileReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectChangeMobileReqDTO' when calling changeMobile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/change-mobile/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {module:model/DirectChangeMobileReqDTO} DirectChangeMobileReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    changeMobile(id, DirectChangeMobileReqDTO) {
      return this.changeMobileWithHttpInfo(id, DirectChangeMobileReqDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    closeAccountWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/close-account/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    closeAccount(id) {
      return this.closeAccountWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AlertRespDTO} and HTTP response
     */
    efxAlertWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxAlert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AlertRespDTO;
      return this.apiClient.callApi(
        '/direct/efx-alert/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AlertRespDTO}
     */
    efxAlert(id) {
      return this.efxAlertWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EfxConfigRespDTO} and HTTP response
     */
    efxConfigWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = EfxConfigRespDTO;
      return this.apiClient.callApi(
        '/direct/efx-config/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EfxConfigRespDTO}
     */
    efxConfig(id) {
      return this.efxConfigWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreditScoreScore} and HTTP response
     */
    efxLatestEFXScoreWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxLatestEFXScore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreditScoreScore;
      return this.apiClient.callApi(
        '/direct/efx-latest-efx-score/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreditScoreScore}
     */
    efxLatestEFXScore(id) {
      return this.efxLatestEFXScoreWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreditReportReport} and HTTP response
     */
    efxLatestReportWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxLatestReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreditReportReport;
      return this.apiClient.callApi(
        '/direct/efx-latest-report/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreditReportReport}
     */
    efxLatestReport(id) {
      return this.efxLatestReportWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreditScoreScore} and HTTP response
     */
    efxLatestScoresWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxLatestScores");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreditScoreScore;
      return this.apiClient.callApi(
        '/direct/efx-latest-scores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreditScoreScore}
     */
    efxLatestScores(id) {
      return this.efxLatestScoresWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CreditScoreHistoryScore>} and HTTP response
     */
    efxScoreHistoryWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxScoreHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CreditScoreHistoryScore];
      return this.apiClient.callApi(
        '/direct/efx-score-history/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CreditScoreHistoryScore>}
     */
    efxScoreHistory(id) {
      return this.efxScoreHistoryWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/CreditScoreAbstractScore>} and HTTP response
     */
    efxScoresWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxScores");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CreditScoreAbstractScore];
      return this.apiClient.callApi(
        '/direct/efx-scores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/CreditScoreAbstractScore>}
     */
    efxScores(id) {
      return this.efxScoresWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserRespDTO} and HTTP response
     */
    getUserWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUser");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserRespDTO;
      return this.apiClient.callApi(
        '/direct/user/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserRespDTO}
     */
    getUser(id) {
      return this.getUserWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DirectLoginReqDTO} DirectLoginReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoginRespDTO} and HTTP response
     */
    loginWithHttpInfo(DirectLoginReqDTO) {
      let postBody = DirectLoginReqDTO;
      // verify the required parameter 'DirectLoginReqDTO' is set
      if (DirectLoginReqDTO === undefined || DirectLoginReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectLoginReqDTO' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = LoginRespDTO;
      return this.apiClient.callApi(
        '/direct/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DirectLoginReqDTO} DirectLoginReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoginRespDTO}
     */
    login(DirectLoginReqDTO) {
      return this.loginWithHttpInfo(DirectLoginReqDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PreauthTokenDTO} and HTTP response
     */
    preauthTokenWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling preauthToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PreauthTokenDTO;
      return this.apiClient.callApi(
        '/direct/preauth-token/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PreauthTokenDTO}
     */
    preauthToken(id) {
      return this.preauthTokenWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LoginRespDTO} and HTTP response
     */
    refreshTokenWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LoginRespDTO;
      return this.apiClient.callApi(
        '/direct/refresh-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LoginRespDTO}
     */
    refreshToken(opts) {
      return this.refreshTokenWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DirectUserRegReqDTO} DirectUserRegReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PreauthTokenDTO} and HTTP response
     */
    registerWithHttpInfo(DirectUserRegReqDTO) {
      let postBody = DirectUserRegReqDTO;
      // verify the required parameter 'DirectUserRegReqDTO' is set
      if (DirectUserRegReqDTO === undefined || DirectUserRegReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectUserRegReqDTO' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PreauthTokenDTO;
      return this.apiClient.callApi(
        '/direct/user-reg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DirectUserRegReqDTO} DirectUserRegReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PreauthTokenDTO}
     */
    register(DirectUserRegReqDTO) {
      return this.registerWithHttpInfo(DirectUserRegReqDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/DirectUserRegReqDTO} DirectUserRegReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserLoginRespDTO} and HTTP response
     */
    registerOldWithHttpInfo(DirectUserRegReqDTO) {
      let postBody = DirectUserRegReqDTO;
      // verify the required parameter 'DirectUserRegReqDTO' is set
      if (DirectUserRegReqDTO === undefined || DirectUserRegReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectUserRegReqDTO' when calling registerOld");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/direct/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {module:model/DirectUserRegReqDTO} DirectUserRegReqDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserLoginRespDTO}
     */
    registerOld(DirectUserRegReqDTO) {
      return this.registerOldWithHttpInfo(DirectUserRegReqDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id 
     * @param {Boolean} rmonly 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateRefreshWithHttpInfo(id, rmonly) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRefresh");
      }
      // verify the required parameter 'rmonly' is set
      if (rmonly === undefined || rmonly === null) {
        throw new Error("Missing the required parameter 'rmonly' when calling updateRefresh");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rmonly': rmonly
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/update-refresh/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id 
     * @param {Boolean} rmonly 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateRefresh(id, rmonly) {
      return this.updateRefreshWithHttpInfo(id, rmonly)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {String} id UserId to generate preauth token for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/UserLoginRespDTO} and HTTP response
     */
    userTokenOldWithHttpInfo(id) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userTokenOld");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/direct/user-token/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * @param {String} id UserId to generate preauth token for
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/UserLoginRespDTO}
     */
    userTokenOld(id) {
      return this.userTokenOldWithHttpInfo(id)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
