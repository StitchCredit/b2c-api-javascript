/**
 * StitchCredit API
 * StitchCredit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlertRespDTO from '../model/AlertRespDTO';
import CreditReport from '../model/CreditReport';
import CreditScore from '../model/CreditScore';
import DirectChangeEmailReqDTO from '../model/DirectChangeEmailReqDTO';
import DirectChangeMobileReqDTO from '../model/DirectChangeMobileReqDTO';
import DirectLoginReqDTO from '../model/DirectLoginReqDTO';
import DirectUserRegReqDTO from '../model/DirectUserRegReqDTO';
import EfxConfigRespDTO from '../model/EfxConfigRespDTO';
import HistoricalScore from '../model/HistoricalScore';
import LatestScore from '../model/LatestScore';
import LoginRespDTO from '../model/LoginRespDTO';
import PreauthTokenDTO from '../model/PreauthTokenDTO';
import UserLoginRespDTO from '../model/UserLoginRespDTO';

/**
* DirectController service.
* @module api/DirectControllerApi
* @version 1.0.0
*/
export default class DirectControllerApi {

    /**
    * Constructs a new DirectControllerApi. 
    * @alias module:api/DirectControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeEmail operation.
     * @callback module:api/DirectControllerApi~changeEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/DirectChangeEmailReqDTO} DirectChangeEmailReqDTO 
     * @param {module:api/DirectControllerApi~changeEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeEmail(id, DirectChangeEmailReqDTO, callback) {
      let postBody = DirectChangeEmailReqDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeEmail");
      }
      // verify the required parameter 'DirectChangeEmailReqDTO' is set
      if (DirectChangeEmailReqDTO === undefined || DirectChangeEmailReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectChangeEmailReqDTO' when calling changeEmail");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/change-email/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeHost operation.
     * @callback module:api/DirectControllerApi~changeHostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {String} host 
     * @param {module:api/DirectControllerApi~changeHostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeHost(id, host, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeHost");
      }
      // verify the required parameter 'host' is set
      if (host === undefined || host === null) {
        throw new Error("Missing the required parameter 'host' when calling changeHost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'host': host
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/change-host/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeMobile operation.
     * @callback module:api/DirectControllerApi~changeMobileCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:model/DirectChangeMobileReqDTO} DirectChangeMobileReqDTO 
     * @param {module:api/DirectControllerApi~changeMobileCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeMobile(id, DirectChangeMobileReqDTO, callback) {
      let postBody = DirectChangeMobileReqDTO;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling changeMobile");
      }
      // verify the required parameter 'DirectChangeMobileReqDTO' is set
      if (DirectChangeMobileReqDTO === undefined || DirectChangeMobileReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectChangeMobileReqDTO' when calling changeMobile");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/change-mobile/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closeAccount operation.
     * @callback module:api/DirectControllerApi~closeAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~closeAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    closeAccount(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling closeAccount");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/close-account/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxAlert operation.
     * @callback module:api/DirectControllerApi~efxAlertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxAlertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertRespDTO}
     */
    efxAlert(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxAlert");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = AlertRespDTO;
      return this.apiClient.callApi(
        '/direct/efx-alert/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxConfig operation.
     * @callback module:api/DirectControllerApi~efxConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EfxConfigRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EfxConfigRespDTO}
     */
    efxConfig(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxConfig");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = EfxConfigRespDTO;
      return this.apiClient.callApi(
        '/direct/efx-config/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxLatestEFXScore operation.
     * @callback module:api/DirectControllerApi~efxLatestEFXScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LatestScore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxLatestEFXScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LatestScore}
     */
    efxLatestEFXScore(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxLatestEFXScore");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LatestScore;
      return this.apiClient.callApi(
        '/direct/efx-latest-efx-score/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxLatestReport operation.
     * @callback module:api/DirectControllerApi~efxLatestReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreditReport} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxLatestReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreditReport}
     */
    efxLatestReport(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxLatestReport");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreditReport;
      return this.apiClient.callApi(
        '/direct/efx-latest-report/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxLatestScores operation.
     * @callback module:api/DirectControllerApi~efxLatestScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LatestScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxLatestScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LatestScore>}
     */
    efxLatestScores(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxLatestScores");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LatestScore];
      return this.apiClient.callApi(
        '/direct/efx-latest-scores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxScoreHistory operation.
     * @callback module:api/DirectControllerApi~efxScoreHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricalScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxScoreHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoricalScore>}
     */
    efxScoreHistory(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxScoreHistory");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [HistoricalScore];
      return this.apiClient.callApi(
        '/direct/efx-score-history/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the efxScores operation.
     * @callback module:api/DirectControllerApi~efxScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreditScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~efxScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreditScore>}
     */
    efxScores(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling efxScores");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CreditScore];
      return this.apiClient.callApi(
        '/direct/efx-scores/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DirectControllerApi~loginCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DirectLoginReqDTO} DirectLoginReqDTO 
     * @param {module:api/DirectControllerApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginRespDTO}
     */
    login(DirectLoginReqDTO, callback) {
      let postBody = DirectLoginReqDTO;
      // verify the required parameter 'DirectLoginReqDTO' is set
      if (DirectLoginReqDTO === undefined || DirectLoginReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectLoginReqDTO' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = LoginRespDTO;
      return this.apiClient.callApi(
        '/direct/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the preauthToken operation.
     * @callback module:api/DirectControllerApi~preauthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreauthTokenDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {module:api/DirectControllerApi~preauthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreauthTokenDTO}
     */
    preauthToken(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling preauthToken");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PreauthTokenDTO;
      return this.apiClient.callApi(
        '/direct/preauth-token/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshToken operation.
     * @callback module:api/DirectControllerApi~refreshTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:api/DirectControllerApi~refreshTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginRespDTO}
     */
    refreshToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LoginRespDTO;
      return this.apiClient.callApi(
        '/direct/refresh-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the register operation.
     * @callback module:api/DirectControllerApi~registerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PreauthTokenDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DirectUserRegReqDTO} DirectUserRegReqDTO 
     * @param {module:api/DirectControllerApi~registerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PreauthTokenDTO}
     */
    register(DirectUserRegReqDTO, callback) {
      let postBody = DirectUserRegReqDTO;
      // verify the required parameter 'DirectUserRegReqDTO' is set
      if (DirectUserRegReqDTO === undefined || DirectUserRegReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectUserRegReqDTO' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PreauthTokenDTO;
      return this.apiClient.callApi(
        '/direct/user-reg', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerOld operation.
     * @callback module:api/DirectControllerApi~registerOldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/DirectUserRegReqDTO} DirectUserRegReqDTO 
     * @param {module:api/DirectControllerApi~registerOldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginRespDTO}
     */
    registerOld(DirectUserRegReqDTO, callback) {
      let postBody = DirectUserRegReqDTO;
      // verify the required parameter 'DirectUserRegReqDTO' is set
      if (DirectUserRegReqDTO === undefined || DirectUserRegReqDTO === null) {
        throw new Error("Missing the required parameter 'DirectUserRegReqDTO' when calling registerOld");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/direct/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRefresh operation.
     * @callback module:api/DirectControllerApi~updateRefreshCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id 
     * @param {Boolean} rmonly 
     * @param {module:api/DirectControllerApi~updateRefreshCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRefresh(id, rmonly, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateRefresh");
      }
      // verify the required parameter 'rmonly' is set
      if (rmonly === undefined || rmonly === null) {
        throw new Error("Missing the required parameter 'rmonly' when calling updateRefresh");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'rmonly': rmonly
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/direct/update-refresh/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the userTokenOld operation.
     * @callback module:api/DirectControllerApi~userTokenOldCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} id UserId to generate preauth token for
     * @param {module:api/DirectControllerApi~userTokenOldCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginRespDTO}
     */
    userTokenOld(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling userTokenOld");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/direct/user-token/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
