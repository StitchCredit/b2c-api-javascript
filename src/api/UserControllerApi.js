/**
 * StitchCredit API
 * StitchCredit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionTokenRespDTO from '../model/ActionTokenRespDTO';
import ChangeEmailReqDTO from '../model/ChangeEmailReqDTO';
import ChangePasswordReqDTO from '../model/ChangePasswordReqDTO';
import ChangeRecoveryReqDTO from '../model/ChangeRecoveryReqDTO';
import CloseAccountReqDTO from '../model/CloseAccountReqDTO';
import CreditScore from '../model/CreditScore';
import EfxConfigRespDTO from '../model/EfxConfigRespDTO';
import HistoricalScore from '../model/HistoricalScore';
import IdentityMobileRespDTO from '../model/IdentityMobileRespDTO';
import IdentityQuizDTO from '../model/IdentityQuizDTO';
import IdentityQuizReqDTO from '../model/IdentityQuizReqDTO';
import IdentityReqDTO from '../model/IdentityReqDTO';
import LatestScore from '../model/LatestScore';
import LoginReqDTO from '../model/LoginReqDTO';
import LoginRespDTO from '../model/LoginRespDTO';
import PasswordRecoveryReqDTO from '../model/PasswordRecoveryReqDTO';
import PasswordResetReqDTO from '../model/PasswordResetReqDTO';
import RedirectView from '../model/RedirectView';
import TokenReqDTO from '../model/TokenReqDTO';
import UserConfigDTO from '../model/UserConfigDTO';
import UserLoginRespDTO from '../model/UserLoginRespDTO';
import UserNotificationsPref from '../model/UserNotificationsPref';
import UserOtpReqDTO from '../model/UserOtpReqDTO';
import UserOtpRespDTO from '../model/UserOtpRespDTO';
import UserRegReqDTO from '../model/UserRegReqDTO';
import UserRenewOtpReqDTO from '../model/UserRenewOtpReqDTO';
import UserRespDTO from '../model/UserRespDTO';

/**
* UserController service.
* @module api/UserControllerApi
* @version 1.0.0
*/
export default class UserControllerApi {

    /**
    * Constructs a new UserControllerApi. 
    * @alias module:api/UserControllerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the changeNotifications operation.
     * @callback module:api/UserControllerApi~changeNotificationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserNotificationsPref} UserNotificationsPref 
     * @param {module:api/UserControllerApi~changeNotificationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRespDTO}
     */
    changeNotifications(UserNotificationsPref, callback) {
      let postBody = UserNotificationsPref;
      // verify the required parameter 'UserNotificationsPref' is set
      if (UserNotificationsPref === undefined || UserNotificationsPref === null) {
        throw new Error("Missing the required parameter 'UserNotificationsPref' when calling changeNotifications");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserRespDTO;
      return this.apiClient.callApi(
        '/users/change-notifications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changePassword operation.
     * @callback module:api/UserControllerApi~changePasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ChangePasswordReqDTO} ChangePasswordReqDTO 
     * @param {module:api/UserControllerApi~changePasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changePassword(ChangePasswordReqDTO, callback) {
      let postBody = ChangePasswordReqDTO;
      // verify the required parameter 'ChangePasswordReqDTO' is set
      if (ChangePasswordReqDTO === undefined || ChangePasswordReqDTO === null) {
        throw new Error("Missing the required parameter 'ChangePasswordReqDTO' when calling changePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/change-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeRecovery operation.
     * @callback module:api/UserControllerApi~changeRecoveryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ChangeRecoveryReqDTO} ChangeRecoveryReqDTO 
     * @param {module:api/UserControllerApi~changeRecoveryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeRecovery(ChangeRecoveryReqDTO, callback) {
      let postBody = ChangeRecoveryReqDTO;
      // verify the required parameter 'ChangeRecoveryReqDTO' is set
      if (ChangeRecoveryReqDTO === undefined || ChangeRecoveryReqDTO === null) {
        throw new Error("Missing the required parameter 'ChangeRecoveryReqDTO' when calling changeRecovery");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/change-recovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the changeUserEmail operation.
     * @callback module:api/UserControllerApi~changeUserEmailCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/ChangeEmailReqDTO} ChangeEmailReqDTO 
     * @param {module:api/UserControllerApi~changeUserEmailCallback} callback The callback function, accepting three arguments: error, data, response
     */
    changeUserEmail(ChangeEmailReqDTO, callback) {
      let postBody = ChangeEmailReqDTO;
      // verify the required parameter 'ChangeEmailReqDTO' is set
      if (ChangeEmailReqDTO === undefined || ChangeEmailReqDTO === null) {
        throw new Error("Missing the required parameter 'ChangeEmailReqDTO' when calling changeUserEmail");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/change-email', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the closeUserAccount operation.
     * @callback module:api/UserControllerApi~closeUserAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/CloseAccountReqDTO} CloseAccountReqDTO 
     * @param {module:api/UserControllerApi~closeUserAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    closeUserAccount(CloseAccountReqDTO, callback) {
      let postBody = CloseAccountReqDTO;
      // verify the required parameter 'CloseAccountReqDTO' is set
      if (CloseAccountReqDTO === undefined || CloseAccountReqDTO === null) {
        throw new Error("Missing the required parameter 'CloseAccountReqDTO' when calling closeUserAccount");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/close-account', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exchangePreauthToken operation.
     * @callback module:api/UserControllerApi~exchangePreauthTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/UserControllerApi~exchangePreauthTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginRespDTO}
     */
    exchangePreauthToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling exchangePreauthToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/users/preauth-token/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getActionToken operation.
     * @callback module:api/UserControllerApi~getActionTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionTokenRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LoginReqDTO} LoginReqDTO 
     * @param {module:api/UserControllerApi~getActionTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionTokenRespDTO}
     */
    getActionToken(LoginReqDTO, callback) {
      let postBody = LoginReqDTO;
      // verify the required parameter 'LoginReqDTO' is set
      if (LoginReqDTO === undefined || LoginReqDTO === null) {
        throw new Error("Missing the required parameter 'LoginReqDTO' when calling getActionToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ActionTokenRespDTO;
      return this.apiClient.callApi(
        '/users/action-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEfxConfig operation.
     * @callback module:api/UserControllerApi~getEfxConfigCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EfxConfigRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getEfxConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EfxConfigRespDTO}
     */
    getEfxConfig(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = EfxConfigRespDTO;
      return this.apiClient.callApi(
        '/users/efx-config', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEfxLatestEFXScore operation.
     * @callback module:api/UserControllerApi~getEfxLatestEFXScoreCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LatestScore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getEfxLatestEFXScoreCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LatestScore}
     */
    getEfxLatestEFXScore(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LatestScore;
      return this.apiClient.callApi(
        '/users/efx-latest-efx-score', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEfxLatestScores operation.
     * @callback module:api/UserControllerApi~getEfxLatestScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LatestScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getEfxLatestScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LatestScore>}
     */
    getEfxLatestScores(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [LatestScore];
      return this.apiClient.callApi(
        '/users/efx-latest-scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEfxScoreHistory operation.
     * @callback module:api/UserControllerApi~getEfxScoreHistoryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/HistoricalScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getEfxScoreHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/HistoricalScore>}
     */
    getEfxScoreHistory(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [HistoricalScore];
      return this.apiClient.callApi(
        '/users/efx-score-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEfxScores operation.
     * @callback module:api/UserControllerApi~getEfxScoresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CreditScore>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getEfxScoresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CreditScore>}
     */
    getEfxScores(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CreditScore];
      return this.apiClient.callApi(
        '/users/efx-scores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIdentityQuiz operation.
     * @callback module:api/UserControllerApi~getIdentityQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityQuizDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getIdentityQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityQuizDTO}
     */
    getIdentityQuiz(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IdentityQuizDTO;
      return this.apiClient.callApi(
        '/users/get-quiz', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobileAuthorization operation.
     * @callback module:api/UserControllerApi~getMobileAuthorizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IdentityMobileRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getMobileAuthorizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IdentityMobileRespDTO}
     */
    getMobileAuthorization(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = IdentityMobileRespDTO;
      return this.apiClient.callApi(
        '/users/get-mobile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UserControllerApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/UserControllerApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRespDTO}
     */
    getUser(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserRespDTO;
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initialize operation.
     * @callback module:api/UserControllerApi~initializeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserConfigDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.referer 
     * @param {String} opts.ctoken 
     * @param {module:api/UserControllerApi~initializeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserConfigDTO}
     */
    initialize(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'referer': opts['referer'],
        'ctoken': opts['ctoken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserConfigDTO;
      return this.apiClient.callApi(
        '/users/initialize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the initializeWithKey operation.
     * @callback module:api/UserControllerApi~initializeWithKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserConfigDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} key 
     * @param {module:api/UserControllerApi~initializeWithKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserConfigDTO}
     */
    initializeWithKey(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling initializeWithKey");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserConfigDTO;
      return this.apiClient.callApi(
        '/users/initialize/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/UserControllerApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/LoginReqDTO} LoginReqDTO 
     * @param {Object} opts Optional parameters
     * @param {String} opts.referer 
     * @param {String} opts.ctoken 
     * @param {module:api/UserControllerApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginRespDTO}
     */
    loginUser(LoginReqDTO, opts, callback) {
      opts = opts || {};
      let postBody = LoginReqDTO;
      // verify the required parameter 'LoginReqDTO' is set
      if (LoginReqDTO === undefined || LoginReqDTO === null) {
        throw new Error("Missing the required parameter 'LoginReqDTO' when calling loginUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'referer': opts['referer'],
        'ctoken': opts['ctoken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoverPassword operation.
     * @callback module:api/UserControllerApi~recoverPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PasswordRecoveryReqDTO} PasswordRecoveryReqDTO 
     * @param {Object} opts Optional parameters
     * @param {String} opts.referer 
     * @param {String} opts.ctoken 
     * @param {module:api/UserControllerApi~recoverPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    recoverPassword(PasswordRecoveryReqDTO, opts, callback) {
      opts = opts || {};
      let postBody = PasswordRecoveryReqDTO;
      // verify the required parameter 'PasswordRecoveryReqDTO' is set
      if (PasswordRecoveryReqDTO === undefined || PasswordRecoveryReqDTO === null) {
        throw new Error("Missing the required parameter 'PasswordRecoveryReqDTO' when calling recoverPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'referer': opts['referer'],
        'ctoken': opts['ctoken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/password-recovery', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the recoveryQuestion operation.
     * @callback module:api/UserControllerApi~recoveryQuestionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionTokenRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/TokenReqDTO} TokenReqDTO 
     * @param {module:api/UserControllerApi~recoveryQuestionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionTokenRespDTO}
     */
    recoveryQuestion(TokenReqDTO, callback) {
      let postBody = TokenReqDTO;
      // verify the required parameter 'TokenReqDTO' is set
      if (TokenReqDTO === undefined || TokenReqDTO === null) {
        throw new Error("Missing the required parameter 'TokenReqDTO' when calling recoveryQuestion");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ActionTokenRespDTO;
      return this.apiClient.callApi(
        '/users/recovery-token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshUserToken operation.
     * @callback module:api/UserControllerApi~refreshUserTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:api/UserControllerApi~refreshUserTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginRespDTO}
     */
    refreshUserToken(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'token': opts['token']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = LoginRespDTO;
      return this.apiClient.callApi(
        '/users/refresh-token', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/UserControllerApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserLoginRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserRegReqDTO} UserRegReqDTO 
     * @param {Object} opts Optional parameters
     * @param {String} opts.referer 
     * @param {String} opts.ctoken 
     * @param {module:api/UserControllerApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserLoginRespDTO}
     */
    registerUser(UserRegReqDTO, opts, callback) {
      opts = opts || {};
      let postBody = UserRegReqDTO;
      // verify the required parameter 'UserRegReqDTO' is set
      if (UserRegReqDTO === undefined || UserRegReqDTO === null) {
        throw new Error("Missing the required parameter 'UserRegReqDTO' when calling registerUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'referer': opts['referer'],
        'ctoken': opts['ctoken']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserLoginRespDTO;
      return this.apiClient.callApi(
        '/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renewMobileCode operation.
     * @callback module:api/UserControllerApi~renewMobileCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOtpRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserRenewOtpReqDTO} UserRenewOtpReqDTO 
     * @param {module:api/UserControllerApi~renewMobileCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOtpRespDTO}
     */
    renewMobileCode(UserRenewOtpReqDTO, callback) {
      let postBody = UserRenewOtpReqDTO;
      // verify the required parameter 'UserRenewOtpReqDTO' is set
      if (UserRenewOtpReqDTO === undefined || UserRenewOtpReqDTO === null) {
        throw new Error("Missing the required parameter 'UserRenewOtpReqDTO' when calling renewMobileCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserOtpRespDTO;
      return this.apiClient.callApi(
        '/users/renew-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPassword operation.
     * @callback module:api/UserControllerApi~resetPasswordCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/PasswordResetReqDTO} PasswordResetReqDTO 
     * @param {module:api/UserControllerApi~resetPasswordCallback} callback The callback function, accepting three arguments: error, data, response
     */
    resetPassword(PasswordResetReqDTO, callback) {
      let postBody = PasswordResetReqDTO;
      // verify the required parameter 'PasswordResetReqDTO' is set
      if (PasswordResetReqDTO === undefined || PasswordResetReqDTO === null) {
        throw new Error("Missing the required parameter 'PasswordResetReqDTO' when calling resetPassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/password-reset', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sendMobileCode operation.
     * @callback module:api/UserControllerApi~sendMobileCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserOtpRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} token 
     * @param {module:api/UserControllerApi~sendMobileCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserOtpRespDTO}
     */
    sendMobileCode(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling sendMobileCode");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = UserOtpRespDTO;
      return this.apiClient.callApi(
        '/users/send-code/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setIdentity operation.
     * @callback module:api/UserControllerApi~setIdentityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IdentityReqDTO} IdentityReqDTO 
     * @param {module:api/UserControllerApi~setIdentityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRespDTO}
     */
    setIdentity(IdentityReqDTO, callback) {
      let postBody = IdentityReqDTO;
      // verify the required parameter 'IdentityReqDTO' is set
      if (IdentityReqDTO === undefined || IdentityReqDTO === null) {
        throw new Error("Missing the required parameter 'IdentityReqDTO' when calling setIdentity");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserRespDTO;
      return this.apiClient.callApi(
        '/users/identity', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startUserSession operation.
     * @callback module:api/UserControllerApi~startUserSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RedirectView} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} opts.referer 
     * @param {String} opts.key 
     * @param {String} opts.ocf 
     * @param {String} opts.oct 
     * @param {module:api/UserControllerApi~startUserSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RedirectView}
     */
    startUserSession(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'key': opts['key'],
        'ocf': opts['ocf'],
        'oct': opts['oct']
      };
      let headerParams = {
        'referer': opts['referer']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = RedirectView;
      return this.apiClient.callApi(
        '/users/start', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyIdentityQuiz operation.
     * @callback module:api/UserControllerApi~verifyIdentityQuizCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/IdentityQuizReqDTO} IdentityQuizReqDTO 
     * @param {module:api/UserControllerApi~verifyIdentityQuizCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRespDTO}
     */
    verifyIdentityQuiz(IdentityQuizReqDTO, callback) {
      let postBody = IdentityQuizReqDTO;
      // verify the required parameter 'IdentityQuizReqDTO' is set
      if (IdentityQuizReqDTO === undefined || IdentityQuizReqDTO === null) {
        throw new Error("Missing the required parameter 'IdentityQuizReqDTO' when calling verifyIdentityQuiz");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserRespDTO;
      return this.apiClient.callApi(
        '/users/verify-quiz', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyMobileCode operation.
     * @callback module:api/UserControllerApi~verifyMobileCodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRespDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:model/UserOtpReqDTO} UserOtpReqDTO 
     * @param {module:api/UserControllerApi~verifyMobileCodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRespDTO}
     */
    verifyMobileCode(UserOtpReqDTO, callback) {
      let postBody = UserOtpReqDTO;
      // verify the required parameter 'UserOtpReqDTO' is set
      if (UserOtpReqDTO === undefined || UserOtpReqDTO === null) {
        throw new Error("Missing the required parameter 'UserOtpReqDTO' when calling verifyMobileCode");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = UserRespDTO;
      return this.apiClient.callApi(
        '/users/verify-code', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
