/**
 * StitchCredit API
 * StitchCredit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Inquiry model module.
 * @module model/Inquiry
 * @version 1.0.0
 */
class Inquiry {
    /**
     * Constructs a new <code>Inquiry</code>.
     * @alias module:model/Inquiry
     */
    constructor() { 
        
        Inquiry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Inquiry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Inquiry} obj Optional instance to populate.
     * @return {module:model/Inquiry} The populated <code>Inquiry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Inquiry();

            if (data.hasOwnProperty('provider')) {
                obj['provider'] = ApiClient.convertToType(data['provider'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], Object);
            }
            if (data.hasOwnProperty('reportedDate')) {
                obj['reportedDate'] = ApiClient.convertToType(data['reportedDate'], 'Date');
            }
            if (data.hasOwnProperty('contactInformation')) {
                obj['contactInformation'] = ApiClient.convertToType(data['contactInformation'], Object);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/Inquiry.ProviderEnum} provider
 */
Inquiry.prototype['provider'] = undefined;

/**
 * @member {String} id
 */
Inquiry.prototype['id'] = undefined;

/**
 * @member {module:model/Inquiry.TypeEnum} type
 */
Inquiry.prototype['type'] = undefined;

/**
 * @member {Object} prefix
 */
Inquiry.prototype['prefix'] = undefined;

/**
 * @member {Date} reportedDate
 */
Inquiry.prototype['reportedDate'] = undefined;

/**
 * @member {Object} contactInformation
 */
Inquiry.prototype['contactInformation'] = undefined;





/**
 * Allowed values for the <code>provider</code> property.
 * @enum {String}
 * @readonly
 */
Inquiry['ProviderEnum'] = {

    /**
     * value: "EFX"
     * @const
     */
    "EFX": "EFX",

    /**
     * value: "TU"
     * @const
     */
    "TU": "TU",

    /**
     * value: "EXP"
     * @const
     */
    "EXP": "EXP",

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Inquiry['TypeEnum'] = {

    /**
     * value: "HARD"
     * @const
     */
    "HARD": "HARD",

    /**
     * value: "SOFT"
     * @const
     */
    "SOFT": "SOFT",

    /**
     * value: "OTHER"
     * @const
     */
    "OTHER": "OTHER"
};



export default Inquiry;

