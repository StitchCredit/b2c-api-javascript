/**
 * StitchCredit API
 * StitchCredit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RedirectViewServletContextJspConfigDescriptorJspPropertyGroups model module.
 * @module model/RedirectViewServletContextJspConfigDescriptorJspPropertyGroups
 * @version 1.0.0
 */
class RedirectViewServletContextJspConfigDescriptorJspPropertyGroups {
    /**
     * Constructs a new <code>RedirectViewServletContextJspConfigDescriptorJspPropertyGroups</code>.
     * @alias module:model/RedirectViewServletContextJspConfigDescriptorJspPropertyGroups
     */
    constructor() { 
        
        RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedirectViewServletContextJspConfigDescriptorJspPropertyGroups</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedirectViewServletContextJspConfigDescriptorJspPropertyGroups} obj Optional instance to populate.
     * @return {module:model/RedirectViewServletContextJspConfigDescriptorJspPropertyGroups} The populated <code>RedirectViewServletContextJspConfigDescriptorJspPropertyGroups</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedirectViewServletContextJspConfigDescriptorJspPropertyGroups();

            if (data.hasOwnProperty('defaultContentType')) {
                obj['defaultContentType'] = ApiClient.convertToType(data['defaultContentType'], 'String');
            }
            if (data.hasOwnProperty('includePreludes')) {
                obj['includePreludes'] = ApiClient.convertToType(data['includePreludes'], ['String']);
            }
            if (data.hasOwnProperty('elIgnored')) {
                obj['elIgnored'] = ApiClient.convertToType(data['elIgnored'], 'String');
            }
            if (data.hasOwnProperty('isXml')) {
                obj['isXml'] = ApiClient.convertToType(data['isXml'], 'String');
            }
            if (data.hasOwnProperty('pageEncoding')) {
                obj['pageEncoding'] = ApiClient.convertToType(data['pageEncoding'], 'String');
            }
            if (data.hasOwnProperty('includeCodas')) {
                obj['includeCodas'] = ApiClient.convertToType(data['includeCodas'], ['String']);
            }
            if (data.hasOwnProperty('scriptingInvalid')) {
                obj['scriptingInvalid'] = ApiClient.convertToType(data['scriptingInvalid'], 'String');
            }
            if (data.hasOwnProperty('errorOnUndeclaredNamespace')) {
                obj['errorOnUndeclaredNamespace'] = ApiClient.convertToType(data['errorOnUndeclaredNamespace'], 'String');
            }
            if (data.hasOwnProperty('deferredSyntaxAllowedAsLiteral')) {
                obj['deferredSyntaxAllowedAsLiteral'] = ApiClient.convertToType(data['deferredSyntaxAllowedAsLiteral'], 'String');
            }
            if (data.hasOwnProperty('trimDirectiveWhitespaces')) {
                obj['trimDirectiveWhitespaces'] = ApiClient.convertToType(data['trimDirectiveWhitespaces'], 'String');
            }
            if (data.hasOwnProperty('urlPatterns')) {
                obj['urlPatterns'] = ApiClient.convertToType(data['urlPatterns'], ['String']);
            }
            if (data.hasOwnProperty('buffer')) {
                obj['buffer'] = ApiClient.convertToType(data['buffer'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} defaultContentType
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['defaultContentType'] = undefined;

/**
 * @member {Array.<String>} includePreludes
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['includePreludes'] = undefined;

/**
 * @member {String} elIgnored
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['elIgnored'] = undefined;

/**
 * @member {String} isXml
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['isXml'] = undefined;

/**
 * @member {String} pageEncoding
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['pageEncoding'] = undefined;

/**
 * @member {Array.<String>} includeCodas
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['includeCodas'] = undefined;

/**
 * @member {String} scriptingInvalid
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['scriptingInvalid'] = undefined;

/**
 * @member {String} errorOnUndeclaredNamespace
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['errorOnUndeclaredNamespace'] = undefined;

/**
 * @member {String} deferredSyntaxAllowedAsLiteral
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['deferredSyntaxAllowedAsLiteral'] = undefined;

/**
 * @member {String} trimDirectiveWhitespaces
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['trimDirectiveWhitespaces'] = undefined;

/**
 * @member {Array.<String>} urlPatterns
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['urlPatterns'] = undefined;

/**
 * @member {String} buffer
 */
RedirectViewServletContextJspConfigDescriptorJspPropertyGroups.prototype['buffer'] = undefined;






export default RedirectViewServletContextJspConfigDescriptorJspPropertyGroups;

