/**
 * StitchCredit API
 * StitchCredit API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationContextClassLoaderParentUnnamedModuleClassLoader from './ApplicationContextClassLoaderParentUnnamedModuleClassLoader';
import RedirectViewServletContextFilterRegistrations from './RedirectViewServletContextFilterRegistrations';
import RedirectViewServletContextJspConfigDescriptor from './RedirectViewServletContextJspConfigDescriptor';
import RedirectViewServletContextServletRegistrations from './RedirectViewServletContextServletRegistrations';
import RedirectViewServletContextSessionCookieConfig from './RedirectViewServletContextSessionCookieConfig';

/**
 * The RedirectViewServletContext model module.
 * @module model/RedirectViewServletContext
 * @version 1.0.0
 */
class RedirectViewServletContext {
    /**
     * Constructs a new <code>RedirectViewServletContext</code>.
     * @alias module:model/RedirectViewServletContext
     */
    constructor() { 
        
        RedirectViewServletContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedirectViewServletContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedirectViewServletContext} obj Optional instance to populate.
     * @return {module:model/RedirectViewServletContext} The populated <code>RedirectViewServletContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedirectViewServletContext();

            if (data.hasOwnProperty('jspConfigDescriptor')) {
                obj['jspConfigDescriptor'] = RedirectViewServletContextJspConfigDescriptor.constructFromObject(data['jspConfigDescriptor']);
            }
            if (data.hasOwnProperty('responseCharacterEncoding')) {
                obj['responseCharacterEncoding'] = ApiClient.convertToType(data['responseCharacterEncoding'], 'String');
            }
            if (data.hasOwnProperty('effectiveMajorVersion')) {
                obj['effectiveMajorVersion'] = ApiClient.convertToType(data['effectiveMajorVersion'], 'Number');
            }
            if (data.hasOwnProperty('requestCharacterEncoding')) {
                obj['requestCharacterEncoding'] = ApiClient.convertToType(data['requestCharacterEncoding'], 'String');
            }
            if (data.hasOwnProperty('effectiveMinorVersion')) {
                obj['effectiveMinorVersion'] = ApiClient.convertToType(data['effectiveMinorVersion'], 'Number');
            }
            if (data.hasOwnProperty('servletRegistrations')) {
                obj['servletRegistrations'] = ApiClient.convertToType(data['servletRegistrations'], {'String': RedirectViewServletContextServletRegistrations});
            }
            if (data.hasOwnProperty('defaultSessionTrackingModes')) {
                obj['defaultSessionTrackingModes'] = ApiClient.convertToType(data['defaultSessionTrackingModes'], ['String']);
            }
            if (data.hasOwnProperty('filterRegistrations')) {
                obj['filterRegistrations'] = ApiClient.convertToType(data['filterRegistrations'], {'String': RedirectViewServletContextFilterRegistrations});
            }
            if (data.hasOwnProperty('effectiveSessionTrackingModes')) {
                obj['effectiveSessionTrackingModes'] = ApiClient.convertToType(data['effectiveSessionTrackingModes'], ['String']);
            }
            if (data.hasOwnProperty('servletContextName')) {
                obj['servletContextName'] = ApiClient.convertToType(data['servletContextName'], 'String');
            }
            if (data.hasOwnProperty('virtualServerName')) {
                obj['virtualServerName'] = ApiClient.convertToType(data['virtualServerName'], 'String');
            }
            if (data.hasOwnProperty('sessionCookieConfig')) {
                obj['sessionCookieConfig'] = RedirectViewServletContextSessionCookieConfig.constructFromObject(data['sessionCookieConfig']);
            }
            if (data.hasOwnProperty('sessionTrackingModes')) {
                obj['sessionTrackingModes'] = ApiClient.convertToType(data['sessionTrackingModes'], ['String']);
            }
            if (data.hasOwnProperty('classLoader')) {
                obj['classLoader'] = ApplicationContextClassLoaderParentUnnamedModuleClassLoader.constructFromObject(data['classLoader']);
            }
            if (data.hasOwnProperty('sessionTimeout')) {
                obj['sessionTimeout'] = ApiClient.convertToType(data['sessionTimeout'], 'Number');
            }
            if (data.hasOwnProperty('servletNames')) {
                obj['servletNames'] = ApiClient.convertToType(data['servletNames'], Object);
            }
            if (data.hasOwnProperty('serverInfo')) {
                obj['serverInfo'] = ApiClient.convertToType(data['serverInfo'], 'String');
            }
            if (data.hasOwnProperty('majorVersion')) {
                obj['majorVersion'] = ApiClient.convertToType(data['majorVersion'], 'Number');
            }
            if (data.hasOwnProperty('minorVersion')) {
                obj['minorVersion'] = ApiClient.convertToType(data['minorVersion'], 'Number');
            }
            if (data.hasOwnProperty('servlets')) {
                obj['servlets'] = ApiClient.convertToType(data['servlets'], Object);
            }
            if (data.hasOwnProperty('initParameterNames')) {
                obj['initParameterNames'] = ApiClient.convertToType(data['initParameterNames'], Object);
            }
            if (data.hasOwnProperty('contextPath')) {
                obj['contextPath'] = ApiClient.convertToType(data['contextPath'], 'String');
            }
            if (data.hasOwnProperty('attributeNames')) {
                obj['attributeNames'] = ApiClient.convertToType(data['attributeNames'], Object);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/RedirectViewServletContextJspConfigDescriptor} jspConfigDescriptor
 */
RedirectViewServletContext.prototype['jspConfigDescriptor'] = undefined;

/**
 * @member {String} responseCharacterEncoding
 */
RedirectViewServletContext.prototype['responseCharacterEncoding'] = undefined;

/**
 * @member {Number} effectiveMajorVersion
 */
RedirectViewServletContext.prototype['effectiveMajorVersion'] = undefined;

/**
 * @member {String} requestCharacterEncoding
 */
RedirectViewServletContext.prototype['requestCharacterEncoding'] = undefined;

/**
 * @member {Number} effectiveMinorVersion
 */
RedirectViewServletContext.prototype['effectiveMinorVersion'] = undefined;

/**
 * @member {Object.<String, module:model/RedirectViewServletContextServletRegistrations>} servletRegistrations
 */
RedirectViewServletContext.prototype['servletRegistrations'] = undefined;

/**
 * @member {Array.<module:model/RedirectViewServletContext.DefaultSessionTrackingModesEnum>} defaultSessionTrackingModes
 */
RedirectViewServletContext.prototype['defaultSessionTrackingModes'] = undefined;

/**
 * @member {Object.<String, module:model/RedirectViewServletContextFilterRegistrations>} filterRegistrations
 */
RedirectViewServletContext.prototype['filterRegistrations'] = undefined;

/**
 * @member {Array.<module:model/RedirectViewServletContext.EffectiveSessionTrackingModesEnum>} effectiveSessionTrackingModes
 */
RedirectViewServletContext.prototype['effectiveSessionTrackingModes'] = undefined;

/**
 * @member {String} servletContextName
 */
RedirectViewServletContext.prototype['servletContextName'] = undefined;

/**
 * @member {String} virtualServerName
 */
RedirectViewServletContext.prototype['virtualServerName'] = undefined;

/**
 * @member {module:model/RedirectViewServletContextSessionCookieConfig} sessionCookieConfig
 */
RedirectViewServletContext.prototype['sessionCookieConfig'] = undefined;

/**
 * @member {Array.<module:model/RedirectViewServletContext.SessionTrackingModesEnum>} sessionTrackingModes
 */
RedirectViewServletContext.prototype['sessionTrackingModes'] = undefined;

/**
 * @member {module:model/ApplicationContextClassLoaderParentUnnamedModuleClassLoader} classLoader
 */
RedirectViewServletContext.prototype['classLoader'] = undefined;

/**
 * @member {Number} sessionTimeout
 */
RedirectViewServletContext.prototype['sessionTimeout'] = undefined;

/**
 * @member {Object} servletNames
 */
RedirectViewServletContext.prototype['servletNames'] = undefined;

/**
 * @member {String} serverInfo
 */
RedirectViewServletContext.prototype['serverInfo'] = undefined;

/**
 * @member {Number} majorVersion
 */
RedirectViewServletContext.prototype['majorVersion'] = undefined;

/**
 * @member {Number} minorVersion
 */
RedirectViewServletContext.prototype['minorVersion'] = undefined;

/**
 * @member {Object} servlets
 */
RedirectViewServletContext.prototype['servlets'] = undefined;

/**
 * @member {Object} initParameterNames
 */
RedirectViewServletContext.prototype['initParameterNames'] = undefined;

/**
 * @member {String} contextPath
 */
RedirectViewServletContext.prototype['contextPath'] = undefined;

/**
 * @member {Object} attributeNames
 */
RedirectViewServletContext.prototype['attributeNames'] = undefined;





/**
 * Allowed values for the <code>defaultSessionTrackingModes</code> property.
 * @enum {String}
 * @readonly
 */
RedirectViewServletContext['DefaultSessionTrackingModesEnum'] = {

    /**
     * value: "COOKIE"
     * @const
     */
    "COOKIE": "COOKIE",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "SSL"
     * @const
     */
    "SSL": "SSL"
};


/**
 * Allowed values for the <code>effectiveSessionTrackingModes</code> property.
 * @enum {String}
 * @readonly
 */
RedirectViewServletContext['EffectiveSessionTrackingModesEnum'] = {

    /**
     * value: "COOKIE"
     * @const
     */
    "COOKIE": "COOKIE",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "SSL"
     * @const
     */
    "SSL": "SSL"
};


/**
 * Allowed values for the <code>sessionTrackingModes</code> property.
 * @enum {String}
 * @readonly
 */
RedirectViewServletContext['SessionTrackingModesEnum'] = {

    /**
     * value: "COOKIE"
     * @const
     */
    "COOKIE": "COOKIE",

    /**
     * value: "URL"
     * @const
     */
    "URL": "URL",

    /**
     * value: "SSL"
     * @const
     */
    "SSL": "SSL"
};



export default RedirectViewServletContext;

